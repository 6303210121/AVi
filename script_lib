import re
import logging
 
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
 
class AclCommonFunctions:
 
    @staticmethod
    def configure_acl(device):
        command_request = """
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="107" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>conf t ; ip access-list user-acl-ssh ; 10 deny ip 192.168.6.1/24 any ; 20 permit ip 192.168.2.1/24 any</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """
        try:
            command_reply = device.nc.request(command_request)
            logger.info("Configuration Reply:\n%s", command_reply)
        except Exception as e:
            raise RuntimeError(f"Failed to send configuration command: {e}")
 
    @staticmethod
    def add_interface_to_acl(device):
        interface_command_request = """
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="109" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>conf t ; interface Eth1/9 ; ip access-group user-acl-ssh in</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """
        try:
            interface_command_reply = device.nc.request(interface_command_request)
            logger.info("Interface ACL Addition Reply:\n%s", interface_command_reply)
        except Exception as e:
            raise RuntimeError(f"Failed to add interface to ACL: {e}")
 
    @staticmethod
    def verify_acl(self, device):
        acl_verification_request = """
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="108" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>show ip access-lists user-acl-ssh</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """
        try:
            verify_reply = device.nc.request(acl_verification_request)
            logger.info("Verification Reply:\n%s", verify_reply)
            
            # Matching the pattern
            pattern = re.compile(r" [A-Z]*\W+[a-z]*\W+[a-z]*\W[a-z0-9]*")
            acl_match = pattern.search(str(verify_reply))
            return bool(acl_match)
        except Exception as e:
            raise RuntimeError(f"Failed to send verification command: {e}")
 
    @staticmethod
    def remove_acl_from_interface(device):
        remove_acl_command_request = """
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="111" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>conf t ; interface Eth1/9 ; no ip access-group user-acl-ssh in</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """
        try:
            remove_acl_command_reply = device.nc.request(remove_acl_command_request)
            logger.info("Remove ACL from Interface Reply:\n%s", remove_acl_command_reply)
        except Exception as e:
            raise RuntimeError(f"Failed to remove ACL from interface: {e}")
 
    @staticmethod
    def delete_acl(device):
        delete_acl_command_request = """
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="112" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>conf t ; no ip access-list user-acl-ssh</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """
        try:
            delete_acl_command_reply = device.nc.request(delete_acl_command_request)
            logger.info("Delete ACL Reply:\n%s", delete_acl_command_reply)
        except Exception as e:
            raise RuntimeError(f"Failed to delete ACL: {e}")


____________________________________________________________________________________________________________________________________________________________________________________________
from pyats import aetest
from pyats.topology import loader
import acl_lib
import logging
 
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
 
class CommonSetup(aetest.CommonSetup):
 
    @aetest.subsection
    def connect_to_device(self, testbed_name="testbed.yaml"):
        self.testbed = loader.load(testbed_name)
        
        #extract device name from the testbed file
        device_name = list(self.testbed.devices.keys())[0]
        self.parent.parameters['device'] = self.testbed.devices[device_name]
        device = self.parent.parameters['device']
        
        #connect to the device using NETCONF
        device.connect(alias='nc', via='netconf')
        assert device.nc.connected, "NETCONF connection failed"
        logger.info("NETCONF connected: %s", device.nc.connected)

 
class ConfigureACL(aetest.Testcase):
    @aetest.test
    def configure_acl(self, device):
        acl_lib.AclCommonFunctions.configure_acl(device)
 
class AddInterfaceToACL(aetest.Testcase):
    @aetest.test
    def add_interface_to_acl(self, device):
        acl_lib.AclCommonFunctions.add_interface_to_acl(device)
 
class VerifyACL(aetest.Testcase):
    @aetest.test
    def verify_acl(self, device):
        result = acl_lib.AclCommonFunctions.verify_acl(self, device)
        if result:
            logger.info("ACL and interface verified successfully.")
        else:
            self.failed("ACL or interface verification failed.")
 
class RemoveACLFromInterface(aetest.Testcase):
    @aetest.test
    def remove_acl_from_interface(self, device):
        acl_lib.AclCommonFunctions.remove_acl_from_interface(device)
 
class DeleteACL(aetest.Testcase):
    @aetest.test
    def delete_acl(self, device):
        acl_lib.AclCommonFunctions.delete_acl(device)
 
class CommonCleanup(aetest.CommonCleanup):
    @aetest.subsection
    def disconnect_from_device(self, device):
        device.nc.disconnect()
        logger.info("NETCONF connected after disconnect: %s", device.nc.connected)
 
if __name__ == '__main__':
    aetest.main()

